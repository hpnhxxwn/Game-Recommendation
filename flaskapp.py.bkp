from flask import Flask, request, Blueprint
from engine import RecommendationEngine
app = Flask(__name__)
from pyspark import SparkConf, SparkContext
#main = Blueprint('main', __name__)
 
import json
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

#@app.route("/<int:user_id>/ratings/top/", methods=["GET"])
#def top_ratings(user_id):
#    logger.debug("User %s TOP ratings requested", user_id)
#    top_ratings = recommendation_engine.get_top_ratings(user_id)
#    return json.dumps(top_ratings)
conf = SparkConf().setAppName("game_recommendation-server")
# IMPORTANT: pass aditional Python modules to each worker
sc = SparkContext(conf=conf)
sc.addPyFile('/home/ubuntu/flaskapp/engine.py')
sc.addPyFile('/home/ubuntu/flaskapp/flaskapp.py')

@app.route('/')
def hello_world():
    return 'Hello world!'

@app.route('/init')
def init():
    global recommendation_engine 
 
    recommendation_engine = RecommendationEngine(sc)    
    #return app
    return 'Hello from Flask!'

@app.route('/showinput/<input_str>')
def show_input(input_str):
    return input_str


@app.route("/<int:user_id>/ratings/top/<int:count>", methods=["GET"])
def top_ratings(user_id, count):
    logger.debug("User %s TOP ratings requested", user_id)
    top_ratings = RecommendationEngine.get_top_ratings(user_id,count)
    return json.dumps(top_ratings)
 
@app.route("/<int:user_id>/ratings/<int:game_id>", methods=["GET"])
def game_ratings(user_id, game_id):
    logger.debug("User %s rating requested for game %s", user_id, game_id)
    ratings = recommendation_engine.get_ratings_for_game_ids(user_id, [game_id])
    return json.dumps(ratings)
 
 
@app.route("/<int:user_id>/ratings", methods = ["POST"])
def add_ratings(user_id):
    # get the ratings from the Flask POST request object
    ratings_list = request.form.keys()[0].strip().split("\n")
    ratings_list = map(lambda x: x.split(","), ratings_list)
    # create a list with the format required by the negine (user_id, game_id, rating)
    ratings = map(lambda x: (user_id, int(x[0]), float(x[1])), ratings_list)
    # add them to the model using then engine API
    recommendation_engine.add_ratings(ratings)
 
    return json.dumps(ratings)
 
#@main.route('/') 
def create_app(spark_context):
    global recommendation_engine 
 
    recommendation_engine = RecommendationEngine(spark_context)    
    
    app = Flask(__name__)
    app.register_blueprint(main)
    return app

if __name__ == "__main__":
    app.run()
